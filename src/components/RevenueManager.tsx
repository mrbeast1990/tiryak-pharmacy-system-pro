
import React, { useState, useMemo } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Badge } from '@/components/ui/badge';
import { useAuthStore } from '@/store/authStore';
import { usePharmacyStore, Revenue } from '@/store/pharmacyStore';
import { ArrowRight, Plus, TrendingUp, FileText, Edit, Trash2 } from 'lucide-react';
import { useToast } from '@/hooks/use-toast';
import jsPDF from 'jspdf';

interface RevenueManagerProps {
  onBack: () => void;
}

const RevenueManager: React.FC<RevenueManagerProps> = ({ onBack }) => {
  const [date, setDate] = useState(new Date().toISOString().split('T')[0]);
  const [shift, setShift] = useState<'morning' | 'evening' | 'night'>('morning');
  const [expense, setExpense] = useState('');
  const [income, setIncome] = useState('');
  const [notes, setNotes] = useState('');
  const [editingId, setEditingId] = useState<string | null>(null);
  const [reportDate, setReportDate] = useState(new Date().toISOString().split('T')[0]);
  
  const { user, checkPermission } = useAuthStore();
  const { revenues, addRevenue, updateRevenue, deleteRevenue, getTotalDailyRevenue, getRevenuesByDateRange } = usePharmacyStore();
  const { toast } = useToast();

  const canManageShift = (targetShift: string) => {
    if (checkPermission('edit_all')) return true;
    
    const userShiftPermissions = {
      morning_shift: 'register_revenue_morning',
      evening_shift: 'register_revenue_evening',
      night_shift: 'register_revenue_night'
    };
    
    return checkPermission(userShiftPermissions[`${targetShift}_shift` as keyof typeof userShiftPermissions]);
  };

  const filteredRevenues = useMemo(() => {
    return revenues.filter(revenue => {
      if (checkPermission('view_all')) return true;
      return revenue.createdBy === user?.name;
    });
  }, [revenues, user, checkPermission]);

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    
    if (!expense || !income) {
      toast({
        title: "خطأ",
        description: "يرجى إدخال قيم الصرف والإيراد",
        variant: "destructive",
      });
      return;
    }

    if (!canManageShift(shift)) {
      toast({
        title: "غير مصرح",
        description: "لا يمكنك تسجيل إيراد لهذه الفترة",
        variant: "destructive",
      });
      return;
    }

    const revenueData = {
      date,
      shift,
      expense: parseFloat(expense),
      income: parseFloat(income),
      notes,
      createdBy: user?.name || '',
      createdAt: new Date().toISOString()
    };

    if (editingId) {
      updateRevenue(editingId, revenueData);
      toast({
        title: "تم التحديث",
        description: "تم تحديث الإيراد بنجاح",
      });
      setEditingId(null);
    } else {
      addRevenue(revenueData);
      toast({
        title: "تم الإضافة",
        description: "تم إضافة الإيراد بنجاح",
      });
    }

    setExpense('');
    setIncome('');
    setNotes('');
  };

  const handleEdit = (revenue: Revenue) => {
    if (!checkPermission('edit_all') && revenue.createdBy !== user?.name) {
      toast({
        title: "غير مصرح",
        description: "لا يمكنك تعديل هذا السجل",
        variant: "destructive",
      });
      return;
    }

    setEditingId(revenue.id);
    setDate(revenue.date);
    setShift(revenue.shift);
    setExpense(revenue.expense.toString());
    setIncome(revenue.income.toString());
    setNotes(revenue.notes || '');
  };

  const handleDelete = (revenue: Revenue) => {
    if (!checkPermission('delete_all') && revenue.createdBy !== user?.name) {
      toast({
        title: "غير مصرح",
        description: "لا يمكنك حذف هذا السجل",
        variant: "destructive",
      });
      return;
    }

    deleteRevenue(revenue.id);
    toast({
      title: "تم الحذف",
      description: "تم حذف الإيراد من السجلات",
    });
  };

  const generatePDFReport = () => {
    if (!checkPermission('export_pdf')) {
      toast({
        title: "غير مصرح",
        description: "لا يمكنك تصدير التقارير",
        variant: "destructive",
      });
      return;
    }

    try {
      const doc = new jsPDF();
      
      // Add Arabic font support (simplified)
      doc.setFont('helvetica');
      doc.setFontSize(16);
      
      // Header
      doc.text('Tiryak Pharmacy Revenue Report', 20, 20);
      doc.setFontSize(12);
      doc.text(`Report Date: ${reportDate}`, 20, 35);
      doc.text(`Generated by: ${user?.name}`, 20, 45);
      doc.text(`Generated on: ${new Date().toLocaleDateString()}`, 20, 55);
      
      // Get revenues for the selected date
      const dateRevenues = getRevenuesByDateRange(reportDate, reportDate);
      let yPosition = 75;
      
      if (dateRevenues.length === 0) {
        doc.text('No revenue records found for this date', 20, yPosition);
      } else {
        // Table headers
        doc.text('Shift', 20, yPosition);
        doc.text('Income', 70, yPosition);
        doc.text('Expense', 120, yPosition);
        doc.text('Net', 170, yPosition);
        yPosition += 15;
        
        let totalIncome = 0;
        let totalExpense = 0;
        
        dateRevenues.forEach((revenue) => {
          doc.text(revenue.shift, 20, yPosition);
          doc.text(revenue.income.toFixed(2), 70, yPosition);
          doc.text(revenue.expense.toFixed(2), 120, yPosition);
          doc.text((revenue.income - revenue.expense).toFixed(2), 170, yPosition);
          
          totalIncome += revenue.income;
          totalExpense += revenue.expense;
          yPosition += 12;
        });
        
        // Totals
        yPosition += 10;
        doc.text('Total Income: ' + totalIncome.toFixed(2), 20, yPosition);
        yPosition += 12;
        doc.text('Total Expense: ' + totalExpense.toFixed(2), 20, yPosition);
        yPosition += 12;
        doc.text('Net Profit: ' + (totalIncome - totalExpense).toFixed(2), 20, yPosition);
      }
      
      doc.save(`tiryak-revenue-${reportDate}.pdf`);
      
      toast({
        title: "تم التصدير",
        description: "تم تصدير التقرير بنجاح",
      });
    } catch (error) {
      toast({
        title: "خطأ في التصدير",
        description: "حدث خطأ أثناء تصدير التقرير",
        variant: "destructive",
      });
    }
  };

  const getShiftLabel = (shift: string) => {
    const labels = {
      morning: 'صباحية',
      evening: 'مسائية',
      night: 'ليلية'
    };
    return labels[shift as keyof typeof labels] || shift;
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-emerald-50 to-teal-100">
      {/* Header */}
      <header className="bg-white shadow-sm border-b">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex items-center justify-between h-16">
            <div className="flex items-center">
              <Button
                onClick={onBack}
                variant="ghost"
                className="flex items-center space-x-2 space-x-reverse"
              >
                <ArrowRight className="w-4 h-4" />
                <span>العودة للرئيسية</span>
              </Button>
              <h1 className="text-xl font-bold text-gray-900 mr-4">إدارة الإيرادات</h1>
            </div>
            
            {checkPermission('export_pdf') && (
              <div className="flex items-center space-x-2 space-x-reverse">
                <Input
                  type="date"
                  value={reportDate}
                  onChange={(e) => setReportDate(e.target.value)}
                  className="w-40"
                />
                <Button onClick={generatePDFReport} className="pharmacy-gradient">
                  <FileText className="w-4 h-4 ml-2" />
                  تصدير PDF
                </Button>
              </div>
            )}
          </div>
        </div>
      </header>

      <main className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
          
          {/* Add/Edit Revenue Form */}
          <div className="lg:col-span-1">
            <Card className="card-shadow">
              <CardHeader>
                <CardTitle>
                  {editingId ? 'تعديل الإيراد' : 'تسجيل إيراد جديد'}
                </CardTitle>
                <CardDescription>
                  {editingId ? 'تعديل بيانات الإيراد' : 'أدخل بيانات الإيراد والصرف'}
                </CardDescription>
              </CardHeader>
              <CardContent>
                <form onSubmit={handleSubmit} className="space-y-4">
                  <div>
                    <label className="text-sm font-medium text-gray-700 mb-2 block">
                      التاريخ
                    </label>
                    <Input
                      type="date"
                      value={date}
                      onChange={(e) => setDate(e.target.value)}
                      required
                    />
                  </div>
                  
                  <div>
                    <label className="text-sm font-medium text-gray-700 mb-2 block">
                      الفترة
                    </label>
                    <Select value={shift} onValueChange={(value: 'morning' | 'evening' | 'night') => setShift(value)}>
                      <SelectTrigger>
                        <SelectValue />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="morning">صباحية</SelectItem>
                        <SelectItem value="evening">مسائية</SelectItem>
                        <SelectItem value="night">ليلية</SelectItem>
                      </SelectContent>
                    </Select>
                  </div>
                  
                  <div>
                    <label className="text-sm font-medium text-gray-700 mb-2 block">
                      الصرف (ريال سعودي)
                    </label>
                    <Input
                      type="number"
                      step="0.01"
                      value={expense}
                      onChange={(e) => setExpense(e.target.value)}
                      placeholder="0.00"
                      required
                    />
                  </div>
                  
                  <div>
                    <label className="text-sm font-medium text-gray-700 mb-2 block">
                      الإيراد (ريال سعودي)
                    </label>
                    <Input
                      type="number"
                      step="0.01"
                      value={income}
                      onChange={(e) => setIncome(e.target.value)}
                      placeholder="0.00"
                      required
                    />
                  </div>
                  
                  <div>
                    <label className="text-sm font-medium text-gray-700 mb-2 block">
                      ملاحظات (اختياري)
                    </label>
                    <Input
                      value={notes}
                      onChange={(e) => setNotes(e.target.value)}
                      placeholder="أدخل ملاحظات إضافية"
                      className="text-right"
                    />
                  </div>
                  
                  {expense && income && (
                    <div className="p-3 bg-blue-50 rounded-lg">
                      <p className="text-sm font-medium text-blue-800">
                        صافي الربح: {(parseFloat(income) - parseFloat(expense)).toFixed(2)} ريال
                      </p>
                    </div>
                  )}
                  
                  <Button type="submit" className="w-full pharmacy-gradient">
                    <Plus className="w-4 h-4 ml-2" />
                    {editingId ? 'تحديث الإيراد' : 'إضافة الإيراد'}
                  </Button>
                  
                  {editingId && (
                    <Button
                      type="button"
                      variant="outline"
                      className="w-full"
                      onClick={() => {
                        setEditingId(null);
                        setDate(new Date().toISOString().split('T')[0]);
                        setShift('morning');
                        setExpense('');
                        setIncome('');
                        setNotes('');
                      }}
                    >
                      إلغاء التعديل
                    </Button>
                  )}
                </form>
              </CardContent>
            </Card>
          </div>

          {/* Revenue List */}
          <div className="lg:col-span-2">
            <Card className="card-shadow">
              <CardHeader>
                <CardTitle className="flex items-center space-x-3 space-x-reverse">
                  <TrendingUp className="w-6 h-6 text-green-500" />
                  <span>سجل الإيرادات</span>
                </CardTitle>
                <CardDescription>
                  إجمالي السجلات: {filteredRevenues.length}
                </CardDescription>
              </CardHeader>
              <CardContent>
                <div className="space-y-3">
                  {filteredRevenues.length === 0 ? (
                    <p className="text-center text-gray-500 py-8">لا توجد إيرادات مسجلة</p>
                  ) : (
                    filteredRevenues
                      .sort((a, b) => new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime())
                      .map((revenue) => (
                        <div
                          key={revenue.id}
                          className="p-4 rounded-lg border-2 border-green-200 bg-green-50"
                        >
                          <div className="flex items-center justify-between">
                            <div className="flex items-center space-x-3 space-x-reverse">
                              <TrendingUp className="w-5 h-5 text-green-500" />
                              <div>
                                <div className="flex items-center space-x-2 space-x-reverse mb-1">
                                  <h3 className="font-medium text-gray-900">
                                    {new Date(revenue.date).toLocaleDateString('ar-SA')}
                                  </h3>
                                  <Badge variant="outline">
                                    {getShiftLabel(revenue.shift)}
                                  </Badge>
                                </div>
                                <div className="text-sm text-gray-600 space-y-1">
                                  <p>الإيراد: {revenue.income.toFixed(2)} ريال | الصرف: {revenue.expense.toFixed(2)} ريال</p>
                                  <p className={`font-medium ${
                                    (revenue.income - revenue.expense) >= 0 ? 'text-green-600' : 'text-red-600'
                                  }`}>
                                    صافي الربح: {(revenue.income - revenue.expense).toFixed(2)} ريال
                                  </p>
                                  <p className="text-xs">بواسطة: {revenue.createdBy}</p>
                                  {revenue.notes && (
                                    <p className="text-gray-600">ملاحظة: {revenue.notes}</p>
                                  )}
                                </div>
                              </div>
                            </div>
                            
                            <div className="flex items-center space-x-2 space-x-reverse">
                              {(checkPermission('edit_all') || revenue.createdBy === user?.name) && (
                                <Button
                                  size="sm"
                                  variant="outline"
                                  onClick={() => handleEdit(revenue)}
                                >
                                  <Edit className="w-4 h-4" />
                                </Button>
                              )}
                              
                              {(checkPermission('delete_all') || revenue.createdBy === user?.name) && (
                                <Button
                                  size="sm"
                                  variant="outline"
                                  onClick={() => handleDelete(revenue)}
                                >
                                  <Trash2 className="w-4 h-4 text-red-500" />
                                </Button>
                              )}
                            </div>
                          </div>
                        </div>
                      ))
                  )}
                </div>
              </CardContent>
            </Card>
          </div>
        </div>
      </main>
    </div>
  );
};

export default RevenueManager;
